<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<book><title>NuFW Howto</title>
  <bookinfo>
    <author>
      <firstname>Eric</firstname>
      <surname>Leblond</surname>
      <email>regit@inl.fr</email>
    </author>
    <author>
      <firstname>Vincent</firstname>
      <surname>Deffontaines</surname>
      <email>gryzor at inl dot fr</email>
    </author>
    <copyright>
      <year>2005</year>
      <holder>INL</holder>
    </copyright>
    <revhistory>
      <revision>
	<revnumber>0.4.3</revnumber>
	<date>2005/11/23</date>
	<revdescription>
	  <para>More informations about nuauth setup, especially with PAM.
          Minor style cleanups</para>
	</revdescription>
      </revision>
      <revision>
	<revnumber>0.4.2</revnumber>
	<date>2005/11/22</date>
	<revdescription>
	  <para>Informations about how to generate one's own certs, signed with
          CA</para>
	</revdescription>
      </revision>
      <revision>
	<revnumber>0.4.1</revnumber>
	<date>2005/08/01</date>
	<revdescription>
	  <para>More SQL informations, especially about credentials and log
          rotation</para>
	</revdescription>
      </revision>
      <revision>
	<revnumber>0.4</revnumber>
	<date>2005/07/25</date>
	<revdescription>
	  <para>RedHat experience,powerpc port</para>
	</revdescription>
      </revision>
      <revision>
	<revnumber>0.3</revnumber>
	<date>2005/07/18</date>
	<revdescription>
	  <para>Reread after 1.0.10 release</para>
	</revdescription>
      </revision>

      <revision>
	<revnumber>0.2</revnumber>
	<date>2005/03/30</date>
	<revdescription>
	  <para>Completion</para>
	</revdescription>
      </revision>
      <revision>
	<revnumber>0.1</revnumber>
	<date>2005/03/09</date>
	<revdescription>
	  <para>Initial prerelease</para>
	</revdescription>
      </revision>
    </revhistory>
  </bookinfo>
  <chapter><title>Introduction</title>
    
    <section><title>Requirements</title>
      <para>In this section, each invoked library will have to be installed and the 
header have to be in standard places (so <command>configure</command> can
		found them).
</para>
      <section><title>Nuauth dependencies</title>
       <section><title>nuauth core daemon</title>
	<para>
nuauth dependencies are as follows:
<itemizedlist>
	    <listitem><para><filename>libglib2.0</filename> : nuauth heavily uses this library which provides a set of very useful high level objects</para></listitem>
	    <listitem><para><filename>libgnutls11</filename> : encryption of communications between the different parts of the system is performed via TLS</para></listitem>
	    <listitem><para><filename>libsasl2</filename> : authentication is done via sasl</para></listitem>
	    <listitem><para><filename>libtool</filename> : It's needed for the compilation of library and modules</para></listitem>
	  </itemizedlist>
</para>
      </section>
      <section><title>mysql logging</title>
	<para>
The <filename>libmysqlclient</filename> library is necessary to the compilation
of this module.
</para>
      </section>
      <section><title>pgsql logging</title>
	<para>
The <filename>libpq</filename> library is necessary to the compilation
of this module.
</para>
      </section>

      <section><title>ldap authentication and acl check</title>
	<para>
<filename>libldap2</filename> is needed.
</para>
      </section>

      <section><title>gdm user authentication</title>
	<para>
<filename>libgdbm3</filename>
</para>
      </section>
      <section><title>ident fallback authentication</title>
	<para>
<filename>libident</filename>
</para>
      </section>
      </section>
      <section><title>Nufw dependencies</title>
	<para>The nufw daemon only depends on :
<itemizedlist>
	    <listitem><para><filename>iptables</filename> : <filename>libipq.a</filename> is necessary to compile the nufw server</para></listitem>
	    <listitem><para><filename>libgnutls11</filename> : nufw speaks to nuauth via a TLS encrypted channel</para></listitem>
	  </itemizedlist>
</para>
      </section>
      <section><title>user marking requirement</title>
	<para>
The system needs a patched version of the ip_queue module and of 
its "sibling" library libipq.
</para>
      </section>
    </section>
  </chapter>

  <chapter><title>Compilation and installation</title>
    <section><title>Kernel preparation</title>
      <para>You only need to patch your kernel sources with patch-o-matic if you want to use userid marking. To do so, install patch-o-matic as usual and
      run <screen>$./runme ip_queue_vwmark</screen></para>
    </section>
    <section><title>NuFW compilation</title>
      <para>Extract the source to the directory of your choice and 
go to the created directory.</para>
      <para>
NuFW uses autoconf and automake for compilation and a standard <command>configure</command> script
is provided.
Above standard options, the following flags are provided :
<itemizedlist>
	  <listitem><para><option>--with-user-mark</option>  Support user mark on NuFW firewall</para></listitem>
	  <listitem><para> <option>--with-mysql-log </option>   Support user activity logging in Mysql database</para></listitem>
	  <listitem><para> <option>--with-pgsql-log </option>   Support user activity logging in PostgreSQL database</para></listitem>
	  <listitem><para> <option>--with-system-auth </option>   Support PAM+NSS authentication</para></listitem>
	  <listitem><para> <option>--with-ldap </option>   Support LDAP directory for users and acl lookups</para></listitem>
	  <listitem><para> <option>--with-gdbm </option>   Support gdbm user lookups</para></listitem>
	  <listitem><para> <option>--with-ident </option>   Support ident users authentication</para></listitem>
	  <listitem><para> <option>--with-debug </option>  Add development debug message</para></listitem>
	</itemizedlist>
A detailed list of the options is available via
<screen>$./configure --help</screen>
Thus you can run <command>./configure</command> with the options you want and launch compilation and installation:
<screen linenumbering="numbered">$ ./configure --with-ldap --with-system-auth --with-mysql-log \\
		--sysconfdir=/etc/nufw/ --with-debug
$ make
$ su
# make install</screen>
We use debug flags as we want to have all messages for testing the whole setup.
</para>
    </section>
    <section><title>Initial setup and tests</title>
      <section><title>Certificates and client installation</title>
	<para>For nufw
<screen>cp conf/certs/nufw-*.pem /etc/nufw/</screen>
		For nuauth :
<screen>cp conf/certs/nuauth*.pem /etc/nufw/
cp conf/certs/NuFW*.pem /etc/nufw/</screen>
</para>
      </section>
      <section><title>Creating your own certificates</title>
      <para>Generating your own Certificate authority:
      <screen>mkdir private
chmod 700 private
openssl req -new -x509 -keyout private/CAkey.pem -out private/CAcert.pem</screen>
You have to set a strong password here and keep it secret.
      </para>
      <para>Generating nufw and nuauth private keys:
      <screen>openssl genrsa -out private/nufw-key.pem</screen>
      <screen>openssl genrsa -out private/nuauth-key.pem</screen>
      </para>
      <para>Generating Certificate Signing Requests for both nufw and nuauth
      keys:
      <screen>openssl req -new -key private/nufw-key.pem -out nufw.csr</screen>
      <screen>openssl req -new -key private/nuauth-key.pem -out nuauth.csr</screen>
      </para>
      <para>Having our keys signed by the certificate authority we created:
      <screen>openssl x509 -req -days 365 -in nufw.csr -CA private/CAcert.pem -CAkey private/CAkey.pem -CAcreateserial -out nufw-cert.pem</screen>
      <screen>openssl x509 -req -days 365 -in nuauth.csr -CA private/CAcert.pem -CAkey private/CAkey.pem -CAcreateserial -out nuauth-cert.pem</screen>
      </para>
      <para>Then, as in previous section, copy the files where needed:
      For nufw:
      <screen>cp private/nufw-key.pem /etc/nufw/</screen>
      <screen>cp nufw-cert.pem /etc/nufw/</screen>
      For nuauth:
      <screen>cp private/nuauth-key.pem /etc/nufw/</screen>
      <screen>cp nuauth-cert.pem /etc/nufw/</screen>
      And don't forget your key files (here, nufw-key.pem and nuauth-key.pem) should always remain private.
      </para>
      </section>
<section><title>Basic nuauth setup</title>
<para>NuFW sources provide a sample configuration file for nuauth <filename>nuauth.conf</filename>
which is available in the <filename>conf</filename> directory. 
</para>
<para>The two most important configuration variables are :
<option>nuauth_client_listen_addr</option> which sets the address
where <command>nuauth</command> listens for client requests and <option>nuauth_nufw_listen_addr</option>
which sets the address where <command>nuauth</command> listens for nufw requests.
The list of <command>nufw</command> servers authorized to connect to server <command>nuauth</command> is the
 <varname>nufw_gw_addr</varname>.</para>
<para>
The next thing to do after setting this variable is to choose
your authentication and acl checking module.
Authentication module for user has to be chosen <footnote><para>nuauth 1.0.X can
use only one authentication module at a time. Use nuauth 1.1.X or above to load
several modules at a time</para></footnote>in :
<itemizedlist>
<listitem><para>libldap : user credentials are stored on a LDAP server</para>
	    </listitem>
<listitem><para>dbm : user credentials are stored in a gdbm</para>
	    </listitem>
<listitem><para>plaintext  : user credentials are stored in a text file</para>
	    </listitem>
<listitem><para>system : authentication is done against PAM and groups are system groups. This provides
 a convenient way to use nss features and/or pam-modules</para>
	    </listitem>
	  </itemizedlist>
This is set with the option <option>nuauth_user_check_module</option>
which default is <varname>libsystem</varname> (if not set in config file).
Further choice for the acl checking  module has to be done if you choose :
<itemizedlist><listitem><para>libldap</para>
	    </listitem>
<listitem><para>plaintext</para>
	    </listitem>
	  </itemizedlist>
by setting the variable <option>nuauth_acl_check_module</option>.
</para>
<para>To be able to proceed quickly to test, we will use the system
module for user and the plaintext module for acl.
A sample file for the plaintext acl check module is available 
in the <filename>conf</filename> directory, <filename>acls.nufw</filename>.
Copy it to <filename>/etc/nufw</filename> and adjust the
group of the ssh acl to have it matching the group of a system
user you will use later to authenticate on the system.</para>
      </section>
	</section>
     <section><title>Testing</title>
	<section><title>Setting up Netfilter rules</title>
	  <para>
We will test the setup by connecting from the local host ssh server. For this
we need to add filtering rules to ask for authentication :
<screen>iptables -A OUTPUT -s 192.168.75.0/24 -p tcp --dport 22 -m state --state NEW --syn -j QUEUE
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</screen>
<footnote><para>
Only SYN packets are sent to QUEUE. This is not enough to do advanced
user activities logging, but enough for trafic authentication.
</para></footnote>
</para>
	</section>

	<section><title>Testing the authentication system</title>
	  <para>First, the daemons need to be started. We start nuauth in a terminal
<screen>nuauth -vvvvvvvvv</screen>
then we start <screen>nufw -vvvvvvvvv</screen> in another terminal.
</para>
	  <para>
Next, we can try to connect a user. Under Linux it can be done with :
<screen>nutcpc -d -H [NUAUTH IP]</screen>
enter name and password of a system user.</para>
<para>At nuauth level, we should see something like :
<screen>user bill@nufw uses OS Linux ,3.0.10, #1 Tue Oct 19 23:51:32 CEST 2008</screen>

<footnote>
      <para> never launch nutcpc against 'localhost' or '127.0.0.1',
even if nuauth is on the same computer.
Packets sent to nuauth by the firewall will hardly have the address of the loopback but rather have a
source address which is one of the network interface.
</para>
	    </footnote>
</para>
	</section>

	<section><title>Initial tests and debug process</title>
	  <para>
	A ssh connection from the computer to start the authentication process :
<itemizedlist>
	      <listitem><para>nufw gets a packet from  Netfilter :
    <screen>[PID] Sending request for 3352783904</screen>
</para>
	      </listitem>
	      <listitem><para>nufw initiates a TLS connection  to nuauth : 
<screen>[PID] Trying TLS connection</screen>
</para></listitem>
	      <listitem><para>nuauth receives nufw's request :
    <screen>** Message: Packet :
** Message: Connection : src=192.168.75.2 dst=192.168.75.2 proto=6
** Message: sport=32848 dport=22</screen></para>
	      </listitem>
	      <listitem><para>nuauth sends an authentication request to the clients
on IP source :
    <screen>** Message: need to warn client
** Message: sending request</screen></para>
	      </listitem>
	      <listitem><para>nuauth receives packet from the client :
    <screen>** Message: User :
** Message: Connection : src=192.168.75.2 dst=192.168.75.2 proto=6
** Message: sport=32848 dport=22
** Message: OS : Linux 2.6.9 #1 Tue Oct 19 23:51:32 CEST 2004
** Message: Application : /usr/bin/ssh</screen></para>
	      </listitem>
	      <listitem><para>nuauth sends back response to nufw :
    <screen>Sending auth answer 1 for 3352783904 on 0x42428482 ...</screen></para>
	      </listitem>
	      <listitem><para>nufw pushes the packet back in the kernel :
    <screen>[PID] Accepting 3352783904</screen>
</para>
	      </listitem>
	    </itemizedlist>
		</para>
	</section>
      </section>
  </chapter>


  <chapter><title>Setting up NuFW</title>
    <section><title>Using the ldap module for acl checking</title>
      <section><title>Slapd configuration</title>
	<para>
The file <filename>acls.schema</filename> has to be put in <filename class="directory">/etc/ldap/schema</filename>
and a line 
<screen>include         /etc/ldap/schema/acls.schema</screen>
has to be added at the beginning of the <filename>/etc/ldap/slapd.conf</filename>.
In the level of access setup in this file, one can add :
<screen>#INL access for acls 
access to  dn="ou=acls,dc=inl,dc=fr" 
       by dn="uid=nufw,ou=Users,dc=inl,dc=fr" write 
       by dn="uid=nuauth,ou=Users,dc=inl,dc=fr" read 
       by dn="cn=admin,dc=inl,dc=fr" write 
       by * none</screen>
nufw user is able to modify the policy and the nuauth user
can only read the acls.
</para>
      </section>
     <section><title>nuauth configuration</title>
	<para>
To use ldap support for acl checking, we need to modify the <filename>nuauth.conf</filename> file : 
<screen>nuauth_acl_check_module="libldap"</screen>
and we have to setup the connection parameters :
<screen>ldap_bind_dn="uid=nuauth,ou=Users,dc=inl,dc=fr"
ldap_bind_password="secretpassword"
ldap_basedn="dc=inl,dc=fr"
ldap_acls_base_dn="ou=Acls,dc=inl,dc=fr"</screen>
</para>
      </section>
      <section><title>Using nuface, a web-based rules generator</title>
<para>
<ulink url="http://www.inl.fr">INL</ulink> has released a powerful Netfilter rules generator system for NuFW and Netfilter. 
It is called Nuface and it is available at :
<ulink url="http://inl.fr/Nuface.html">http://inl.fr/Nuface.html</ulink>
It generates a set of rules for NuFW and Netfilter that can directly be applied from the web interface.
</para>
      </section>
      <section><title>nuaclen configuration</title>
      <para>nuaclgen is a script that can help you maintain a simple
      set of acls in an ldap tree.</para>
	<para>
The file <filename>nuaclgen.conf</filename> contains the informations about ldap
connections. It needs to be modified to suit your configuration, for example :
<screen>$ldap_host="localhost"; 
$username="uid=nufw,ou=Users,dc=inl,dc=fr"; 
$password="writepasswd";
$basedn="ou=Acls,dc=inl,dc=fr";</screen>
<footnote><para>The nuaclgen.conf file contains sensitive data
and thus must have limited rights.</para>
	  </footnote>

</para>
	<para>To allow ssh for users
of group 513 if they use <filename>/usr/bin/ssh</filename> application, we can use :
<screen>nuaclgen -A cn=ssh,ou=Acls,dc=inl,dc=fr -p 6 --dport 22 -AppName "/usr/bin/ssh" -j ACCEPT -g 513</screen>
</para>
	<para>Or for access directed to a web server :
<screen>
nuaclgen -A cn=apt,ou=Acls,dc=inl,dc=fr -p 6 --dport 80 -AppName "/usr/lib/apt/methods/http" -j ACCEPT -g 1042
</screen>
This ACL gives access to group 1042  which is used by root user of some server of ours.
Thus root user can only get file to update the computer, but other users can not access
the web.
</para>
      </section>
 
    </section>
    <section><title>Setting up NuFW authenticated connections tracking</title>
      <section><title>nuauth settings</title>
	<para>
 To achieve NuFW connection tracking it is necessary to have these options in <filename>nuauth.conf</filename> :
 <screen>nuauth_log_users_sync=1
nuauth_log_users=8</screen>
</para>
      </section>
<section><title>SQL configuration</title>
<para>The connection tracking system is really useful with SQL logging modules.
We will describe here the setup of the MySQL module.</para>
<para>
You have to create the SQL database from the dump file available in the conf/
subdir of the archive. Create a SQL account, which must have UPDATE,
INSERT privileges on the "conntrack_ulog" table. You will have to set the
credentials for that user in the nuauth.conf file.
</para>
<para>
When installing NuFW in production, you have to use the clean_conntrack.pl
script, which is available in the scripts/ subdir of the NuFW archive from
version 1.0.12 on. For prior versions, you can get the script from <ulink
url="http://www.inl.fr/download/nulog.html.en">Nulog project homepage</ulink>.
You have to create a SQL user to run the script, with the following permissions
: <code>SELECT</code> and <code>DELETE</code> on the "conntrack_ulog" table,
<code>INSERT</code> on the "ulog" table. The script must be run, every few
minutes, from cron, especially on busy firewalls. If you don't run this script, your "conntrack_ulog" table
will grow quickly with "dead" connexions, and will cause NuFW to act slower and
slower. All the script does is transfer "dead" data (ie closed connexions,
dropped connexions) to the ulog table, which is plainly an archive table, not 
used on production by NuFW, nor by the SSO subsystems.
</para>
<para>
You may also want to rotate the "ulog" table, so that it doesn't grow to infinite
size with time. From 1.0.12 on, scripts are available for this task in the scripts/ subdir of
the archive. Before 1.0.12, you can get those two scripts from the Nulog archive
at 
<ulink url="http://www.inl.fr/download/nulog.html.en">Nulog project homepage</ulink>  
Look for the ulog_rotate_*.sh scripts. 
At the present time, it is assumed those scripts are run as the root SQL user,
as cronjobs. Of course the better way to go is to create a separate user for
this and grant it the needed privileges. Please provide updates for this
document if you implement this before we do.
</para>
      </section>
      <section><title>Netfilter settings</title>
	<para>
NuFW stores the following states in the life of a TCP connection :
    <itemizedlist><listitem><para>opening : bit SYN is set</para></listitem>
	    <listitem><para>established : SYN ACK is sent</para></listitem>
	    <listitem><para>closed : the tcp flags are FIN or FIN,ACK</para></listitem>
	  </itemizedlist>
To match those packets we need to use the <option>--syn</option> and the
<option>--tcp-flags</option> options.
Let's use the following configuration as an example : our web servers are protected by a NuFW firewall. They are in the network $DMZ.
The following rules achieve to realize a user connection tracking on the web
server outgoing connections.
<screen>iptables -A FORWARD -p tcp -m state --state ESTABLISHED --tcp-flags ACK,FIN NONE -j ACCEPT
iptables -A FORWARD -d $DMZ -p tcp -m state --state ESTABLISHED --dport 80 --tcp-flags SYN,RST,ACK RST -j QUEUE
iptables -A FORWARD -d $DMZ -p tcp -m state --state ESTABLISHED --dport 80 --tcp-flags FIN FIN -j QUEUE
iptables -A FORWARD -s $DMZ -p tcp -m state --state ESTABLISHED --sport 80 --tcp-flags SYN,ACK SYN,ACK -j QUEUE
iptables -A FORWARD -p tcp -m state --state ESTABLISHED -j ACCEPT
iptables -A FORWARD -d $DMZ -p tcp --syn --dport 80 -m state --state NEW -j QUEUE</screen>
The first rule optimizes the filter by matching an important part of the ESTABLISHED traffic. The last rule with --state ESTABLISHED is the standard accepted established packets. It has to be put after NuFW flags matching rules. 
</para>
      </section>
<section><title>Using the connection tracking</title>
<para>
<command>nutop</command> is a perl script provided with nufw sources. It is a
top like tool that displays the active and authenticated connections in real-time.
</para>
<para>The best way<footnote><para>as far as the author of this document knows at the time of the writing of 
this document</para>
	  </footnote> to use the logs generated by the connection tracking is to install
<command>nulog</command>(a.k.a ulog-php)  which provides a convenient web interface.
<command>nulog</command> is available under GPL on this page :
<ulink url="http://inl.fr/Nulog.html">http://inl.fr/Nulog.html</ulink>  
</para>
	</section>
    </section>
<section><title>Single Sign On setup</title>
<section><title>Apache</title>
<para>All you need to do is to setup a SQL user with SELECT permissions on the 
"conntrack_ulog" table. Then setup mod_auth_nufw to use the configured SQL 
user/database/table. The source code of the apache module is available at <ulink
url="http://inl.fr/mod-auth-nufw.html">NuFW Apache SSO page</ulink></para>
	</section>
<section><title>Squid</title>
<para>All you need to do is to setup a SQL user with SELECT permissions on the
"conntrack_ulog" table. Then setup squid_nufw_helper to use the configured SQL
user/database/table. The source code of the squid helper is available at
<ulink url="http://inl.fr/squid-nufw-helper.html">NuFW Squid SSO page</ulink></para>
	</section>
      </section>
	<section><title>Certificate authentication</title>
<para>It is possible to use certificate authentication of clients : If
a user provides at TLS negotiation a certificate which DN matches a known
user then nuauth assumes the users is authenticated and doesn't ask for a 
password.
To activate this functionnality, you need to set the option 
<option>nuauth_tls_request_cert</option> to 1.
</para>
	</section>
<section><title>User based Quality of Service</title>
<section><title>Setting up Kernel and software</title>
<para>
Official Linux kernels are not able to mark packets
with ip_queue framework.
It is thus necessary to patch the kernel, this has to be done by using
the <filename>ip_queue_vwmark</filename> patch available in the
patch-o-matic-ng from netfilter. This will generate a modified version of both 
ip_queue module and libipq.a file.
</para>
<para>
Once the new libipq.a is installed, you can now compile nufw :
<screen>./configure --with-user-mark ${EXTRA_OPTIONS_YOU_LIKE}
make
make install</screen>
nufw can now be run with <option>-m</option> to use userid marking.
</para>
    </section>
<section><title>Setting up Netfilter</title>
<para>
As nufw only works with initialisation packets it can not pull the userid mark of each packet
of a connection. Thus, this is necessary to use
<application>CONNMARK<footnote><para>CONNMARK is only available in patch-o-matic
before 2.6.11, it is included in 2.6.12+ kernels</para>
	    </footnote></application>
which is a target able to propagate marks accross connections.
A basic setup is the following :
<screen>iptables -A PREROUTING -t mangle -j CONNMARK --restore-mark
iptables -A POSTROUTING -t mangle -j CONNMARK --save-mark</screen>
First line restores the existing mark when a packet arrives and second line
saves mark on the connection so it can be restored later.
</para>
      </section>
<section><title>Using userid mark</title>
<para>Netfilter mark can be use by the Quality of Servic system and
the routing system of Linux.</para>
<para>
So it is possible to do differenciated routing between different users
by using command like  :
<screen>ip rule add fwmark XXX lookup TABLE</screen>
</para>
<para>This is almost the same for QoS, by using <command>tc filter</command> one needs to put
user's flows in a specific class :
<screen>tc filter add dev IFACE  prio 5 protocol ip handle 102 fw flowid FLOWID</screen>
</para>
<para>For more information about routing and quality of service you can read 
<ulink url="http://www.lartc.org">lartc</ulink>.
</para>
      </section>
    </section>
<section><title>Hardening NuFW install</title>
<section><title>Nufw certificate verification</title>
<para>It is warmly recommanded to put the nuauth
in a protected place to ensure the security of 
communications between nufw and nuauth<footnote><para>Even if all flows are TLS encrypted</para>
	</footnote>.
As the firewall policy relay on the answer of nuauth, is it good to check that
the nuauth server is  trustable. To do so we can ask nufw to check the certificate provided
by nuauth during the TLS negotiation. This is done by using the <option>-a</option> at start
of nufw followed by the name of the certificate authority file.
With this option set <varname>nufw</varname> will check the presence of a signed certificat
on nuauth side.</para>
      </section>
<section><title>On client side</title>
<para>
On client side, system needs to be trustable if you want to perform
valuable application and OS filtering. You must never forget that
it is the application on client side which tells the application name as
well as the operating system name and version : these informations CAN and WILL
be spoofed if a malicious user installs a modified NuFW agent.
</para>
<para>
This warning needs to be taken into account but one can not forget
this feature exists to secure flows that an administrator be would have to keep
open applications on a standard system<footnote><para>Please avoid an ABS effect 
: <quote>we've got more security so we can break later</quote></para>
	  </footnote>.
 </para>
<para>Thus, the value of application and os filtering depends on the confidence you have 
on the system which issues the authentication. On a secured system where users can not install
software, this sort of filtering is "quite secure".</para>
      </section>
</section>
<section><title>Nuauth authentication configurations</title>
 <section><title>PAM authentication with Nuauth</title>
  <para>PAM is a very convenient way for extending authentication to "exotic"
  directories. In particular, PAM lets one interface nuauth on NT domains,
  Active Directory, Radius, etc.
  </para>
  <para>To have nuauth authenticate users based on PAM, one must set in
  nuauth.conf (for 1.0):
  <screen>nuauth_user_check_module="system"</screen>
  </para>
  <para>
  In addition, PAM needs to be properly setup, which is external to NuFW, and
  basically out of the scope of this document. Here are a couple of files to set
  on Debian to get PAM working with nuauth:
  /etc/pam.d/nuauth :
  <screen>#This is to set PAM-LDAP, modify to suit your needs!
  auth    required      /lib/security/pam_env.so
  auth    sufficient    /lib/security/pam_ldap.so
  auth    required      /lib/security/pam_deny.so

  account required      /lib/security/pam_ldap.so

  session required      /lib/security/pam_limits.so
  session optional      /lib/security/pam_ldap.so</screen>
  The /etc/nssswitch.conf file also needs to be tuned :
  <screen>#This is to set PAM-LDAP, modify to suit your needs!
  passwd:         compat ldap
  group:          compat ldap
  </screen>
  (leave the other lines unchanged).
  And you probably also need to tune the /etc/pam_ldap.conf file. This file
  works for us :
  <screen>
  host 127.0.0.1
  ldap_version 3
  scope one
  pam_password crypt
  nss_base_passwd         ou=Users,dc=nufw,dc=org?one
  nss_base_group          ou=Group,dc=nufw,dc=org?one
  </screen>
  Of course, tune this to suit your needs, and be aware that these system
  instructions may not be accurate for other distributions!
  </para>

 </section>
 <section><title>LDAP authentication with Nuauth</title>
  <para>This is pretty straightforward : most of the work is to be done in
  nuauth.conf (options are documented in that file itself). Be aware that using
  direct LDAP authentication requires that you use a NuFW specific LDAP schema,
  which can be considered inconvenient. In such a case, use PAM, as described
  above.
  </para>
 </section>
</section>
  </chapter>
<chapter><title>Miscellaneous</title>
<section><title>Big endian architectures</title>
<para>Big endian architectures are supported since version 1.0.11. Prior
releases do not work on big endian.</para>
</section>
<section><title>Debian specific</title>
<para>NuFW packages are part of the debian distribution. Those packages are
quite unstable, please backup your config before upgrading them and provide
feedback ! From 1.0.16 on we believe the debian packaging is getting pretty stable.
</para>
<para>Nothing specific for now.</para>
      </section>
<section><title>Mandrake specific</title>
<para>Nothing specific for now.</para>
      </section>
<section><title>Suse specific</title>
<para>Suse version 9 seems to use a very old Glib, which is not compatible with
NuFW. It seems this is true for all Suse versions until v9.</para>
      </section>
<section><title>Redhat specific</title>
<section><title>RedHat Enterprise Linux 4</title>
<para>As RHEL4 is shipped with a 2.6.9 kernel that is subject to the ip_queue
problem mentionned later in this document. With this
kernel the bug occurs systematically (at least on SMP machines).</para>
</section>
      </section>
<section><title>Known issues</title>
<section><title>Problem with ip_queue on kernel prior to 2.6.12</title>
<para>
There's an ip_queue bug on kernels prior to 2.6.12. It can hang the system when an ACCEPT decision is done
on the INPUT chain. Thus DO NOT use a QUEUE target on INPUT with these kernels or it could freeze your computer.
</para>
</section>
      </section>
  </chapter>

  <glossary>
    <glossentry><glossterm>nufw</glossterm>
      <indexterm><primary>nufw</primary></indexterm>
      <glossdef>
	<para>nufw is the server running on the firewall which receives the packets coming from
kernel and send them to the authentication server and wait a response.</para>
      </glossdef>
    </glossentry>
    <glossentry><glossterm>nuauth</glossterm>
      <indexterm><primary>nuauth</primary></indexterm>
      <glossdef>
	<para>nuauth is the authentication server which receives the packets coming from
nufw and the packets coming from user and send back a decision to nufw.</para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
