<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@


	The docbook-to-man binary is found in the docbook-to-man package.
	Please remember that if you create the nroff version in one of the
	debian/rules file targets (such as build), you will need to include
	docbook-to-man in your Build-Depends control field.

  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>Eric</firstname>">
  <!ENTITY dhsurname   "<surname>Leblond</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>november 4, 2008</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>1</manvolnum>">
  <!ENTITY dhemail2     "<email>vincent@gryzor.com</email>">
  <!ENTITY dhemail    "<email>eric@regit.org</email>">
  <!ENTITY dhusername  "Eric Leblond">
  <!ENTITY dhucpackage "<refentrytitle>nutcpc</refentrytitle>">
  <!ENTITY dhpackage   "nutcpc">

  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">

]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2004-2008</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>NuFW console-mode client for GNU/Linux and BSD systems</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>-d </arg>
      <arg>-l </arg>
      <arg>-k </arg>
      <arg>-c </arg>
      <arg>-V </arg>
      <arg>-h </arg>
      <arg>-q </arg>
      <arg>-Q </arg>
      <arg>-N </arg>
      <arg><option>-H <replaceable>Nuauth IP</replaceable></option></arg>
      <arg><option>-p <replaceable>Nuauth port </replaceable></option></arg>
      <arg><option>-U <replaceable>UserID</replaceable></option></arg>
      <arg><option>-P <replaceable>UserPassword</replaceable></option></arg>
      <arg><option>-I <replaceable>Interval</replaceable></option></arg>
      <arg><option>-Z <replaceable>Service</replaceable></option></arg>
      <arg><option>-C <replaceable>CertFile</replaceable></option></arg>
      <arg><option>-A <replaceable>AuthorityFile</replaceable></option></arg>
      <arg><option>-K <replaceable>KeyFile</replaceable></option></arg>
      <arg><option>-W <replaceable>CertPass</replaceable></option></arg>
      <arg><option>-R <replaceable>CrlFile</replaceable></option></arg>
      <arg><option>-a <replaceable>NuauthDN</replaceable></option></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>This manual page documents the
      <command>&dhpackage;</command> command.</para>

      <para>&dhpackage; is a console-mode client for the NuFW authenticating firewall. It sends
      authentication packets to the nuauth server. All parameters can be set on commandline but nutcpc can also be configured via the file nuclient.conf(5).
       </para>

      <para>Original packaging and informations and help can be found from http://www.nufw.org/</para>

  </refsect1>
  <refsect1>
    <title>OPTIONS</title>

    <variablelist>
 <varlistentry>
        <term><option>-d</option>
        </term>
        <listitem>
          <para>Debug mode, don't go into background.</para>
        </listitem>
      </varlistentry>
     <varlistentry>
        <term><option>-l</option>
        </term>
        <listitem>
          <para>Do not verify whether lock file exists before starting. And do
          not create lock file.</para>
        </listitem>
      </varlistentry>
     <varlistentry>
        <term><option>-k</option>
        </term>
        <listitem>
          <para>Kill existing instances of the program running
          on our local userID.</para>
        </listitem>
      </varlistentry>
     <varlistentry>
        <term><option>-c</option>
        </term>
        <listitem>
          <para>Check if a client is already running. Return error if no client are running.</para>
        </listitem>
      </varlistentry>
       <varlistentry>
        <term><option>-V</option>
        </term>
        <listitem>
          <para>Issues program version and exits.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-h</option>
        </term>
        <listitem>
          <para>Issues usage details and exits.</para>
        </listitem>
      </varlistentry>
     <varlistentry>
        <term><option>-q</option>
        </term>
        <listitem>
          <para>Do not display running nutcpc options on "ps". Useful when using "-W"</para>
        </listitem>
      </varlistentry>
    <varlistentry>
        <term><option>-H <replaceable>Nuauth IP</replaceable></option>
        </term>
        <listitem>
          <para>Send authentication packet  to <replaceable>Nuauth IP</replaceable>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-p <replaceable>Nuauth port</replaceable></option>
        </term>
        <listitem>
          <para>Send authentication packet  to <replaceable>Nuauth port</replaceable>.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-U <replaceable>User ID</replaceable></option>
        </term>
        <listitem>
          <para>Set nufw userid to <replaceable>User ID</replaceable>.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-P <replaceable>User Password</replaceable></option>
        </term>
        <listitem>
          <para>Set nufw password to <replaceable>User Password</replaceable>.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-I <replaceable>Interval</replaceable></option>
        </term>
        <listitem>
          <para>Set connection list refresh interval to <replaceable>Interval</replaceable>. This option is only useful if nuauth server is in POLL mode.</para>
        </listitem>
      </varlistentry>
	  <varlistentry>
        <term><option>-Z <replaceable>Service</replaceable></option>
        </term>
        <listitem>
          <para>Set kerberos service name to <replaceable>Service</replaceable>.</para>
        </listitem>
      </varlistentry>

          <varlistentry>
        <term><option>-C <replaceable>CertFile</replaceable></option>
        </term>
        <listitem>
          <para>Use certificate file stored in the file <replaceable>CertFile</replaceable> to negotiate the TLS connection to nuauth.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-A <replaceable>AuthorityFile</replaceable></option>
        </term>
        <listitem>
          <para>Use authority file stored in <replaceable>AuthorityFile</replaceable> and check the validity of nuauth certificate against this authority.  Nutcpc will leave if this is not the case.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-K <replaceable>KeyFile</replaceable></option>
        </term>
        <listitem>
          <para>Use key file stored in the file <replaceable>KeyFile</replaceable> to negotiate the TLS connection to nuauth.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-W <replaceable>CertPass</replaceable></option>
        </term>
        <listitem>
          <para>Use the passphrase <replaceable>CertPass</replaceable> to decrypt the certificate. Check the <replaceable>-q</replaceable> option if you use this.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-R <replaceable>CrlFile</replaceable></option>
        </term>
        <listitem>
          <para>Use certificate revocation list file stored in the file <replaceable>CrlFile</replaceable> to negotiate the TLS connection to nuauth. nutcpc reloads this file if it gets disconnected from nuauth and needs to reconnect. Since version 2.2.19, nutcpc reloads the CRL file when receiving a HUP signal.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-a <replaceable>NuauthDN</replaceable></option>
        </term>
        <listitem>
          <para>Verify that the certificate given by nuauth has a DN equal to <replaceable>NuauthDN</replaceable>. Nutcpc will leave if this is not the case.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-Q</option>
        </term>
        <listitem>
          <para>Suppress warning if no certificate authority is configured.</para>
        </listitem>
      </varlistentry>
          <varlistentry>
        <term><option>-N</option>
        </term>
        <listitem>
          <para>Suppress error if server FQDN does not match certificate CN.</para>
        </listitem>
      </varlistentry>
   </variablelist>
  </refsect1>
  <refsect1>
    <title>LOCK FILE</title>
    <para>By default, the lock file set by nutcpc is at ~/.nufw/nutcpc.</para>
  </refsect1>
  <refsect1>
    <title>CERTIFICATE AUTHENTICATION</title>
    <para>User authentication can be done using a certificate and a private key. Such a method will be used, if nutcpc can find a certificate at ~/.nufw/cert.pem and the corresponding private key at ~/.nufw/key.pem. The server identity will be checked if a CA certificate is provided in ~/.nufw/cacert.pem. Certificates and key can also be provided on command line or via nuclient.conf(5).</para>
  </refsect1>
  <refsect1>
    <title>SIGNALS</title>
    <variablelist>
      <varlistentry>
        <term><option>HUP</option>
        </term>
        <listitem>
          <para>When receiving this signal, nutcpc attempts to immediately
          reconnect to the server, if disconnected. The signal is ignored in
          other cases.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para>nufw(8)</para>
    <para>nuauth(8)</para>
    <para>nuclient.conf(5)</para>
  </refsect1>
  <refsect1>
    <title>AUTHOR</title>
    <para>Nuauth was designed and coded by Eric Leblond, aka Regit (&dhemail;) , and Vincent
    Deffontaines, aka gryzor (&dhemail2;). Original idea in 2001, while working on NSM Ldap
    support.</para>

    <para>This manual page was written by &dhusername;.</para>
      <para>Permission is
      granted to copy, distribute and/or modify this document under
      the terms of the &gnu; Free Documentation
      License, Version 2 as published by the Free
      Software Foundation; with no Invariant Sections, no Front-Cover
      Texts and no Back-Cover Texts.</para>

  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->


